name: Generate PR Summary

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  pr-summary:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"

      - name: Build Docupocus CLI
        run: go build -o docupocus ./cmd/docupocus/

      - name: Generate PR Summary
        id: generate_summary
        run: |
          raw_summary=$(./docupocus \
            --non-interactive \
            --summary \
            --base-branch main \
            --ai-api-key "${{ secrets.OPENROUTER_API_KEY }}" \
            --ai-backend openrouter)

          # Extract only the AI summary portion
          filtered_summary=$(echo "$raw_summary" | sed -n '/Raw summary API response:/,$p' | sed '1d')
          filtered_summary=$(echo "$filtered_summary" | sed '/^\s*$/d')

          # Escape multiline summary properly
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$filtered_summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: ðŸ’¬ Post PR Summary as comment
        uses: actions/github-script@v6
        env:
          SUMMARY: ${{ steps.generate_summary.outputs.summary }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = process.env.SUMMARY;
            if (!summary || summary.trim() === "") {
              console.log("No summary to post.");
              return;
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ðŸ¤– Automated PR Summary\n\n${summary}`
            });
